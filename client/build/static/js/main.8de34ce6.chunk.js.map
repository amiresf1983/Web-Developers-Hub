{"version":3,"sources":["serviceWorker.js","context/auth.js","util/AuthRoute.js","components/MenuBar.js","util/MyPopup.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","Object","objectSpread2","payload","AuthProvider","props","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","react_default","a","createElement","Provider","assign","value","setItem","token","AuthRoute","_ref","Component","component","rest","objectWithoutProperties","_excluded","useContext","react_router","render","to","MenuBar","_useContext","pathname","path","substr","_useState","useState","_useState2","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","_templateObject","taggedTemplateLiteral","LikeButton","_ref$post","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","_useMutation","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","util_MyPopup","Label","FETCH_POSTS_QUERY","graphql_templateObject","DELETE_POST_MUTATION","DeleteButton_templateObject","DELETE_COMMENT_MUTATION","_templateObject2","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","getPosts","filter","p","writeQuery","deletePostOrMutation","Fragment","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","concat","moment","fromNow","Description","extra","components_LikeButton","components_DeleteButton","useForm","arguments","length","undefined","values","setValues","onChange","event","defineProperty","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm_templateObject","PostForm","_useForm","createPost","result","toConsumableArray","_useMutation2","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","_useQuery","useQuery","loading","posts","Grid","columns","Row","Column","components_PostForm","Transition","Group","map","key","components_PostCard","LOGIN_USER","Login_templateObject","Login","context","errors","setErrors","loginUser","password","_","history","push","onError","err","extensions","exception","noValidate","label","primary","keys","REGISTER_USER","Register_templateObject","Register","addUser","email","confirmPassword","register","SUBMIT_COMMENT_MUTATION","SinglePost_templateObject","FETCH_POST_QUERY","SinglePost_templateObject2","SinglePost","postMarkup","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","width","float","console","log","ref","disabled","trim","App","react_router_dom","Container","components_MenuBar","exact","util_AuthRoute","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","cache","InMemoryCache","ApolloProvider","react_common_esm","src_App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de34ce6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useReducer, createContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\nconst initialState = {\n  user: null\n};\n\nif (localStorage.getItem('jwtToken')) {\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return {\n        ...state,\n        user: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    localStorage.setItem('jwtToken', userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem('jwtToken');\n    dispatch({ type: 'LOGOUT' });\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user: state.user, login, logout }}\n      {...props}\n    />\n  );\n}\n\nexport { AuthContext, AuthProvider };\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction AuthRoute({ component: Component, ...rest }) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\n      }\n    />\n  );\n}\n\nexport default AuthRoute;\n","import React, { useContext, useState } from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction MenuBar() {\n  const { user, logout } = useContext(AuthContext);\n  const pathname = window.location.pathname;\n\n  const path = pathname === '/' ? 'home' : pathname.substr(1);\n  const [activeItem, setActiveItem] = useState(path);\n\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  const menuBar = user ? (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"logout\" onClick={logout} />\n      </Menu.Menu>\n    </Menu>\n  ) : (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item\n        name=\"home\"\n        active={activeItem === 'home'}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/\"\n      />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item\n          name=\"login\"\n          active={activeItem === 'login'}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/login\"\n        />\n        <Menu.Item\n          name=\"register\"\n          active={activeItem === 'register'}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/register\"\n        />\n      </Menu.Menu>\n    </Menu>\n  );\n\n  return menuBar;\n}\n\nexport default MenuBar;\n","import { Popup } from 'semantic-ui-react';\nimport React from 'react';\n\nfunction MyPopup({ content, children }) {\n  return <Popup inverted content={content} trigger={children} />;\n}\n\nexport default MyPopup;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { Button, Label, Icon } from 'semantic-ui-react';\n\nimport MyPopup from '../util/MyPopup';\n\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\n  const [liked, setLiked] = useState(false);\n\n  useEffect(() => {\n    if (user && likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    } else setLiked(false);\n  }, [user, likes]);\n\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\n    variables: { postId: id }\n  });\n\n  const likeButton = user ? (\n    liked ? (\n      <Button color=\"teal\">\n        <Icon name=\"heart\" />\n      </Button>\n    ) : (\n      <Button color=\"teal\" basic>\n        <Icon name=\"heart\" />\n      </Button>\n    )\n  ) : (\n    <Button as={Link} to=\"/login\" color=\"teal\" basic>\n      <Icon name=\"heart\" />\n    </Button>\n  );\n\n  return (\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n      <MyPopup content={liked ? 'Unlike' : 'Like'}>{likeButton}</MyPopup>\n      <Label basic color=\"teal\" pointing=\"left\">\n        {likeCount}\n      </Label>\n    </Button>\n  );\n}\n\nconst LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      id\n      likes {\n        id\n        username\n      }\n      likeCount\n    }\n  }\n`;\n\nexport default LikeButton;\n","import gql from 'graphql-tag';\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\n\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport MyPopup from '../util/MyPopup';\n\nfunction DeleteButton({ postId, commentId, callback }) {\n  const [confirmOpen, setConfirmOpen] = useState(false);\n\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n  const [deletePostOrMutation] = useMutation(mutation, {\n    update(proxy) {\n      setConfirmOpen(false);\n      if (!commentId) {\n        const data = proxy.readQuery({\n          query: FETCH_POSTS_QUERY\n        });\n        data.getPosts = data.getPosts.filter((p) => p.id !== postId);\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      }\n      if (callback) callback();\n    },\n    variables: {\n      postId,\n      commentId\n    }\n  });\n  return (\n    <>\n      <MyPopup content={commentId ? 'Delete comment' : 'Delete post'}>\n        <Button\n          as=\"div\"\n          color=\"red\"\n          floated=\"right\"\n          onClick={() => setConfirmOpen(true)}\n        >\n          <Icon name=\"trash\" style={{ margin: 0 }} />\n        </Button>\n      </MyPopup>\n      <Confirm\n        open={confirmOpen}\n        onCancel={() => setConfirmOpen(false)}\n        onConfirm={deletePostOrMutation}\n      />\n    </>\n  );\n}\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      id\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default DeleteButton;\n","import React, { useContext } from 'react';\nimport { Button, Card, Icon, Label, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction PostCard({\n  post: { body, createdAt, id, username, likeCount, commentCount, likes }\n}) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Image\n          floated=\"right\"\n          size=\"mini\"\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n        />\n        <Card.Header>{username}</Card.Header>\n        <Card.Meta as={Link} to={`/posts/${id}`}>\n          {moment(createdAt).fromNow(true)}\n        </Card.Meta>\n        <Card.Description>{body}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\n        <MyPopup content=\"Comment on post\">\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n            <Button color=\"blue\" basic>\n              <Icon name=\"comments\" />\n            </Button>\n            <Label basic color=\"blue\" pointing=\"left\">\n              {commentCount}\n            </Label>\n          </Button>\n        </MyPopup>\n        {user && user.username === username && <DeleteButton postId={id} />}\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default PostCard;\n","import { useState } from 'react';\n\nexport const useForm = (callback, initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const onChange = (event) => {\n    setValues({ ...values, [event.target.name]: event.target.value });\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    callback();\n  };\n\n  return {\n    onChange,\n    onSubmit,\n    values\n  };\n};\n","import React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction PostForm() {\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\n    body: ''\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = '';\n    }\n  });\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return (\n    <>\n      <Form onSubmit={onSubmit}>\n        <h2>Create a post:</h2>\n        <Form.Field>\n          <Form.Input\n            placeholder=\"Hi World!\"\n            name=\"body\"\n            onChange={onChange}\n            value={values.body}\n            error={error ? true : false}\n          />\n          <Button type=\"submit\" color=\"teal\">\n            Submit\n          </Button>\n        </Form.Field>\n      </Form>\n      {error && (\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\n          <ul className=\"list\">\n            <li>{error.graphQLErrors[0].message}</li>\n          </ul>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id\n      body\n      createdAt\n      username\n      likes {\n        id\n        username\n        createdAt\n      }\n      likeCount\n      comments {\n        id\n        body\n        username\n        createdAt\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default PostForm;\n","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid, Transition } from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction Home() {\n  const { user } = useContext(AuthContext);\n  const {\n    loading,\n    data: { getPosts: posts }\n  } = useQuery(FETCH_POSTS_QUERY);\n\n  return (\n    <Grid columns={3}>\n      <Grid.Row className=\"page-title\">\n        <h1>Recent Posts</h1>\n      </Grid.Row>\n      <Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n        {loading ? (\n          <h1>Loading posts..</h1>\n        ) : (\n          <Transition.Group>\n            {posts &&\n              posts.map((post) => (\n                <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                  <PostCard post={post} />\n                </Grid.Column>\n              ))}\n          </Transition.Group>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\nfunction Login(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n    username: '',\n    password: ''\n  });\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(\n      _,\n      {\n        data: { login: userData }\n      }\n    ) {\n      context.login(userData);\n      props.history.push('/');\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n        <h1>Login</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          type=\"text\"\n          value={values.username}\n          error={errors.username ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          type=\"password\"\n          value={values.password}\n          error={errors.password ? true : false}\n          onChange={onChange}\n        />\n        <Button type=\"submit\" primary>\n          Login\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Login;\n","import React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\nfunction Register(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(\n      _,\n      {\n        data: { register: userData }\n      }\n    ) {\n      context.login(userData);\n      props.history.push('/');\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n        <h1>Register</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          type=\"text\"\n          value={values.username}\n          error={errors.username ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Email\"\n          placeholder=\"Email..\"\n          name=\"email\"\n          type=\"email\"\n          value={values.email}\n          error={errors.email ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          type=\"password\"\n          value={values.password}\n          error={errors.password ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Confirm Password\"\n          placeholder=\"Confirm Password..\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          error={errors.confirmPassword ? true : false}\n          onChange={onChange}\n        />\n        <Button type=\"submit\" primary>\n          Register\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst REGISTER_USER = gql`\n  mutation register(\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Register;\n","import React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label\n} from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n\n  const [comment, setComment] = useState('');\n\n  const {\n    data: { getPost }\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment\n    }\n  });\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let postMarkup;\n  if (!getPost) {\n    postMarkup = <p>Loading post..</p>;\n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount\n    } = getPost;\n\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Image\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n              size=\"small\"\n              float=\"right\"\n            />\n          </Grid.Column>\n          <Grid.Column width={10}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\n                <MyPopup content=\"Comment on post\">\n                  <Button\n                    as=\"div\"\n                    labelPosition=\"right\"\n                    onClick={() => console.log('Comment on post')}\n                  >\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {commentCount}\n                    </Label>\n                  </Button>\n                </MyPopup>\n                {user && user.username === username && (\n                  <DeleteButton postId={id} callback={deletePostCallback} />\n                )}\n              </Card.Content>\n            </Card>\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <p>Post a comment</p>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Comment..\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={(event) => setComment(event.target.value)}\n                        ref={commentInputRef}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"ui button teal\"\n                        disabled={comment.trim() === ''}\n                        onClick={submitComment}\n                      >\n                        Submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n            {comments.map((comment) => (\n              <Card fluid key={comment.id}>\n                <Card.Content>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={id} commentId={comment.id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './util/AuthRoute';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport SinglePost from './pages/SinglePost';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport App from \"./App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { setContext } from \"apollo-link-context\";\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000\",\n});\n\nconst authLink = setContext(() => {\n  const token = localStorage.getItem(\"jwtToken\");\n  return {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport default (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}